// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	// unary call
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	// unary call
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	// unary call
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error)
	// unary call
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	// unary call
	GetBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
	// server streaming
	ListBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (BookService_ListBooksClient, error)
	// client streaming
	BooksCost(ctx context.Context, opts ...grpc.CallOption) (BookService_BooksCostClient, error)
	// client & server streaming
	TopRatedBook(ctx context.Context, opts ...grpc.CallOption) (BookService_TopRatedBookClient, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error) {
	out := new(DeleteBookResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ListBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (BookService_ListBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], "/book.BookService/ListBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceListBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_ListBooksClient interface {
	Recv() (*GetBookResponse, error)
	grpc.ClientStream
}

type bookServiceListBooksClient struct {
	grpc.ClientStream
}

func (x *bookServiceListBooksClient) Recv() (*GetBookResponse, error) {
	m := new(GetBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) BooksCost(ctx context.Context, opts ...grpc.CallOption) (BookService_BooksCostClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[1], "/book.BookService/BooksCost", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceBooksCostClient{stream}
	return x, nil
}

type BookService_BooksCostClient interface {
	Send(*BooksCostRequest) error
	CloseAndRecv() (*BooksCostResponse, error)
	grpc.ClientStream
}

type bookServiceBooksCostClient struct {
	grpc.ClientStream
}

func (x *bookServiceBooksCostClient) Send(m *BooksCostRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookServiceBooksCostClient) CloseAndRecv() (*BooksCostResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BooksCostResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) TopRatedBook(ctx context.Context, opts ...grpc.CallOption) (BookService_TopRatedBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[2], "/book.BookService/TopRatedBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceTopRatedBookClient{stream}
	return x, nil
}

type BookService_TopRatedBookClient interface {
	Send(*TopRatedRequest) error
	Recv() (*TopRatedResponse, error)
	grpc.ClientStream
}

type bookServiceTopRatedBookClient struct {
	grpc.ClientStream
}

func (x *bookServiceTopRatedBookClient) Send(m *TopRatedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookServiceTopRatedBookClient) Recv() (*TopRatedResponse, error) {
	m := new(TopRatedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	// unary call
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	// unary call
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	// unary call
	DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error)
	// unary call
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error)
	// unary call
	GetBooks(context.Context, *EmptyRequest) (*GetBooksResponse, error)
	// server streaming
	ListBooks(*EmptyRequest, BookService_ListBooksServer) error
	// client streaming
	BooksCost(BookService_BooksCostServer) error
	// client & server streaming
	TopRatedBook(BookService_TopRatedBookServer) error
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBooks(context.Context, *EmptyRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServiceServer) ListBooks(*EmptyRequest, BookService_ListBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookServiceServer) BooksCost(BookService_BooksCostServer) error {
	return status.Errorf(codes.Unimplemented, "method BooksCost not implemented")
}
func (UnimplementedBookServiceServer) TopRatedBook(BookService_TopRatedBookServer) error {
	return status.Errorf(codes.Unimplemented, "method TopRatedBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBooks(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ListBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).ListBooks(m, &bookServiceListBooksServer{stream})
}

type BookService_ListBooksServer interface {
	Send(*GetBookResponse) error
	grpc.ServerStream
}

type bookServiceListBooksServer struct {
	grpc.ServerStream
}

func (x *bookServiceListBooksServer) Send(m *GetBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BookService_BooksCost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).BooksCost(&bookServiceBooksCostServer{stream})
}

type BookService_BooksCostServer interface {
	SendAndClose(*BooksCostResponse) error
	Recv() (*BooksCostRequest, error)
	grpc.ServerStream
}

type bookServiceBooksCostServer struct {
	grpc.ServerStream
}

func (x *bookServiceBooksCostServer) SendAndClose(m *BooksCostResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookServiceBooksCostServer) Recv() (*BooksCostRequest, error) {
	m := new(BooksCostRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BookService_TopRatedBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).TopRatedBook(&bookServiceTopRatedBookServer{stream})
}

type BookService_TopRatedBookServer interface {
	Send(*TopRatedResponse) error
	Recv() (*TopRatedRequest, error)
	grpc.ServerStream
}

type bookServiceTopRatedBookServer struct {
	grpc.ServerStream
}

func (x *bookServiceTopRatedBookServer) Send(m *TopRatedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookServiceTopRatedBookServer) Recv() (*TopRatedRequest, error) {
	m := new(TopRatedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _BookService_GetBooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBooks",
			Handler:       _BookService_ListBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BooksCost",
			Handler:       _BookService_BooksCost_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TopRatedBook",
			Handler:       _BookService_TopRatedBook_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "book/book_service.proto",
}
